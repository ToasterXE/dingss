class bewegungsrichtung():
    def __init__(self, rect, speed):
        self.wert = 1
        self.Vector = pygame.math.Vector2()
        self.rect = rect
        self.rect_relevant = pygame.rect.Rect(self.rect.left - 1, self.rect.top -1, self.rect.width + 2, self.rect.height + 2)
        self.wert_collide = self.rect
        self.wert_space = pygame.math.Vector2()
        self.hinderniss_links = False
        self.hinderniss_oben = False
        self.hinderniss_rechts = False
        self.hinderniss_unten = False
        self.speed = speed


    def wert_check(self, wert):
        print ("e")
        if self.wert > 4:
            self.wert -= 4

        if self.wert <= 0:
            self.wert += 4
        
        if self.hinderniss_links == False and self.hinderniss_oben == False and self.hinderniss_rechts == False and self.hinderniss_unten == False:
            self.Vector = pygame.math.Vector2(0,1)
            return True


        if wert == 1:    #rechts
            self.Vector.x = 1
            self.Vector.y = 0
            self.wert_collide = pygame.rect.Rect(self.rect.left - self.rect.width, self.rect.top - self.rect.height, self.rect.width,1)
            self.wert_space = pygame.math.Vector2(self.rect.right + feld_pixel / 8, self.rect.centery)
            if self.hinderniss_rechts == True or self.hinderniss_unten == False:
                return False
            elif self.hinderniss_unten == True:
                return True

        if wert == 2:    #unten
            self.Vector.x = 0
            self.Vector.y = 1
            self.wert_collide = pygame.rect.Rect(self.rect.left - 1, self.rect.top, 1, self.rect.height)
            self.wert_space = pygame.math.Vector2(self.rect.centerx, self.rect.bottom + feld_pixel / 8)
            if self.hinderniss_unten == True or self.hinderniss_links == False:
                return False
            elif self.hinderniss_links == True:
                return True

        if wert == 3:    #links
            self.Vector.x = -1
            self.Vector.y = 0
            self.wert_collide = pygame.rect.Rect(self.rect.left, self.rect.top - 1, self.rect.width, 1)
            self.wert_space = pygame.math.Vector2(self.rect.left - feld_pixel / 8, self.rect.centery)
            if self.hinderniss_links == True or self.hinderniss_oben == False:
                return False
            elif self.hinderniss_oben  == True:
                return True

        if wert == 4:  #oben
            self.Vector.x = 0
            self.Vector.y = -1
            self.wert_collide = pygame.rect.Rect(self.rect.left + self.rect.width, self.rect.top, 1, self.rect.height)
            self.wert_space = pygame.math.Vector2(self.rect.centerx, self.rect.top - feld_pixel / 8)
            if self.hinderniss_oben == True or self.hinderniss_rechts == False:
                return False
            elif self.hinderniss_rechts == True:
                return True


    def update(self):
        self.rect_relevant = pygame.rect.Rect(self.rect.left - 1, self.rect.top -1, self.rect.width + 2, self.rect.height + 2)
        self.wert += 1
        self.hinderniss_links = False
        self.hinderniss_oben = False
        self.hinderniss_rechts = False
        self.hinderniss_unten = False
        if self.wert > 4:
            self.wert -= 4

        if self.wert <= 0:
            self.wert += 4
        
        

        for hinderniss in collisionSprites:
            if hinderniss.rect.colliderect(self.rect_relevant):
                self.Vector = pygame.math.Vector2(0,0)
                if hinderniss.rect.colliderect((self.rect.left, self.rect.bottom, self.rect.width / 2, 1)):
                    self.hinderniss_unten = True
                #if hinderniss.rect.colliderect((self.rect.left + self.speed, self.rect.bottom, self.rect.width / 2, 1)):
                #    self.hinderniss_unten  = True
                #    print("unten")
                if hinderniss.rect.colliderect((self.rect.right, self.rect.centery, 1, self.rect.height / 2)):
                    self.hinderniss_rechts = True
                #if hinderniss.rect.colliderect((self.rect.right, self.rect.centery - self.speed, 1, self.rect.height / 2)):
                #    self.hinderniss_rechts = True
               #     print("rechts")
                if hinderniss.rect.colliderect((self.rect.centerx, self.rect.top -1, self.rect.width / 2, 1)):
                    self.hinderniss_oben = True
                #if hinderniss.rect.colliderect((self.rect.left - self.speed, self.rect.top - 1, self.rect.width / 2, 1)):
                #    self.hinderniss_oben = True
                if hinderniss.rect.colliderect((self.rect.left - 1, self.rect.top, 1, self.rect.height / 2)):
                    self.hinderniss_links = True
                #if hinderniss.rect.colliderect((self.rect.left - 1, self.rect.top + self.speed, 1, self.rect.height / 2)):
                #    self.hinderniss_links = True
             #       print("links")

        self.wert += 1
        while self.wert_check(self.wert) == False:
            self.wert -= 1
            if self.wert > 4:
                self.wert -= 4

            if self.wert <= 0:
                self.wert += 4
            #print(self.wert)
            