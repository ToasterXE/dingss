    def move(self):

        self.oben = False            
        self.rechts = False
        self.links = False
        self.unten = False
        
        for hinderniss in collisionSprites:
            if hinderniss.rect.colliderect(self.rect):

                if hinderniss.rect.collidepoint(self.rect.centerx, self.rect.bottom):   #unten
                    self.unten = True

                if hinderniss.rect.collidepoint(self.rect.right, self.rect.centery):  #rechts
                    self.rechts = True
                    self.unten = False

                if hinderniss.rect.collidepoint(self.rect.centerx, self.rect.top):   #oben                    
                    self.oben = True
                    self.rechts = False
                    self.unten = False

                if hinderniss.rect.collidepoint(self.rect.left, self.rect.centery):  #links
                    self.links = True
                    self.unten = False
                    self.oben = False
                    self.rechts = False

                if self.oben == False and self.rechts == False and self.links == False and self.unten == False:

                    if hinderniss.rect.collidepoint(self.rect.left, self.rect.bottom):
                        if hinderniss.rect.collidepoint(self.rect.left + self.speed, self.rect.bottom):   #unten
                            self.unten = True
                        else:
                            self.links = True

                    if hinderniss.rect.collidepoint(self.rect.right, self.rect.bottom):
                        if hinderniss.rect.collidepoint(self.rect.right, self.rect.bottom - self.speed):  #rechts
                            self.rechts = True
                        else:
                            self.unten = True

                    if hinderniss.rect.collidepoint(self.rect.right, self.rect.top):
                        if hinderniss.rect.collidepoint(self.rect.right - self.speed, self.rect.top):  #oben
                            self.oben = True
                        else:
                            self.rechts = True

                    if hinderniss.rect.collidepoint(self.rect.left, self.rect.top):
                        if hinderniss.rect.collidepoint(self.rect.left, self.rect.top + self.speed):  #links
                            self.links = True
                        else:
                            self.oben = True
            
            if self.links == True and self.rechts == True:
                self.rechts = False


        if self.oben == False and self.links == False and self.rechts == False and self.unten == False:
            self.bewegungsrichtung.x = 0
            self.bewegungsrichtung.y = 1
            if random.randint(1,4) == 1:
                self.image = self.image_oben
            if random.randint(1,4) == 2:
                self.image = self.image_rechts
            if random.randint(1,4) == 3:
                self.image = self.image_unten
            if random.randint(1,4) == 4:
                self.image = self.image_links       
        
        
        if self.links == True:    #links, bewegung nach unten
            self.image = self.image_links
            self.hit_image = self.image_links_hit
            self.bewegungsrichtung.x = 0
            self.bewegungsrichtung.y = 1
        
        if self.unten == True:   #unten, bewegung nach rechts
            self.image = self.image_unten
            self.hit_image = self.image_unten_hit
            self.bewegungsrichtung.x = 1
            self.bewegungsrichtung.y = 0
        
        if self.rechts == True:    #rechts, bewegung nach oben
            self.image = self.image_rechts
            self.hit_image = self.image_rechts_hit
            self.bewegungsrichtung.x = 0
            self.bewegungsrichtung.y = -1

        if self.oben == True: #oben, bewegung nach links
            self.image = self.image_oben
            self.hit_image = self.image_oben_hit
            self.bewegungsrichtung.x = -1
            self.bewegungsrichtung.y = 0

        self.rect.topleft += self.bewegungsrichtung * self.speed
